#!/usr/bin/perl -w

# Wed Jun 24 16:42:42 EDT 2009
(my $email='chrjae@gmail.com')=~ tr/%,/@./;

use strict;

my ($mydir, $_myname);
BEGIN {
    $0=~ /(.*?)([^\/]+)\z/s or die "?";
    ($mydir, $_myname)=($1,$2);
}
use lib "$mydir/lib";
our $stationsfile= "$mydir/stations.pl";
our $capturecmd= ["capture-http-stream"];

my $myname= "radio";

sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname radioname

  Instead of radionname, give -l to get listing of all known radionames.

  Radioname can be part of the key given in -l, split on the
  underscore or digit and alphabetic character parts, or prefixes
  thereof, as long as there's no conflict.

  Options:
  -l|--list  list known station keys
  -b|--bitrate  list known station keys including bitrate (where given)
  -lb|--lb   *only* list stations having a bitrate
  --url      show URL in listings
  -lu        show listing with URL
  --dry-run  only select station, don't open it
  -m|--mono  mix to a single channel (only works with mpg123 for now)
  --capture  capture stream instead of playing it (using @$capturecmd)
  -ao drvr   choose output driver (alsa|jack|pulseaudio ..)
  --mplayer  choose mplayer over mpg123 etc.

  --action-given  do not play anything, exit 0 if radioname or another
                  kind of action was given, 1 otherwise.

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
our ($opt_l,$opt_bitrate,$opt_dry);
our $opt_mono;
our $opt_capture;
our $opt_ao;
our $opt_mplayer;
our $opt_lb;
our $opt_url;
our $opt_action_given;
our $opt_help;
GetOptions("verbose"=> \$verbose,
	   "help"=> \$opt_help,
	   "list"=>\$opt_l,
	   "u|url"=> \$opt_url,
	   "l"=>\$opt_l,
	   "bitrate"=>\$opt_bitrate,
	   "dry-run"=> \$opt_dry,
	   "mono"=> \$opt_mono,
	   "capture"=> \$opt_capture,
	   "ao=s"=> \$opt_ao,
	   "mplayer"=> \$opt_mplayer,
	   "lb"=> sub {
	       $opt_l=1;
	       $opt_bitrate=1;
	       $opt_lb=1;
	   },
	   "lu"=> sub {
	       $opt_l=1;
	       $opt_url=1;
	   },
	   "action-given"=> \$opt_action_given,
	   ) or exit 1;

if ($opt_action_given) {
    exit ((@ARGV or $opt_help or $opt_l or $opt_url or $opt_bitrate)
	  ? 0 : 1)
}

usage if $opt_help;

usage unless @ARGV==1 or $opt_l or $opt_bitrate;

our ($rawkey)=@ARGV;

# copy from Chj::xperlfunc
sub xexec {
    #local $^W;
    no warnings;
    exec @_;
    die "xexec ".join(" ",@_).": $!";
}
use Tree::Trie;

our $run=sub {
    our ($cmd,@args)=@_;
    xexec (@$cmd,@args)
};

#use lib "/opt/functional-perl/lib"; use Chj::Trapl;
#use Chj::Backtrace;

our $mkplayer= sub {
    my ($player,$maybe_playername)=@_;
    my $playername= $maybe_playername || $$player[0];
    sub {
	@_ == 2 or @_ == 3 or die "expecting 2-3 arguments";
	my ($key, $url, $maybe_bitrate)=@_;
	(lc($key),
	 [
	  sub {
	      if ($opt_dry) {
		  print "Would play $key ($url) with $playername.\n";
	      } elsif ($opt_capture) {
		  my $msg= "*** Capturing $key ($url) ***";
		  print "$msg\n";
		  xexec @$capturecmd, $url;
	      } else {
		  my $msg= "*** Playing $key ($url) with $playername ***";
		  my $line= "*"x(length($msg));
		  print "$line\n$msg\n$line\n";
		  &$run ($player,$url)
	      }
	  },
	  $maybe_bitrate,
	  # and in order to name it in error messages in ambiguity
	  # detection:
	  $key,
	  # and to allow for --url option:
	  $url
	 ]
	)
    }
};

# to avoid "used only once" warnings:
sub mms; sub mp3; sub ogg;

*mms=
    &$mkplayer (["mplayer",
		 "-quiet",
		 ($opt_ao ? ("-ao",$opt_ao) : ()),
		 "-cache", "200",
		 "-cache-min", "40",
		 # ^ make dependent on bitrate? 40 seems too much for
		 #   z (yet maybe most needed there, so perhaps fine)
		 "-noconsolecontrols",
		 # ^ necessary to be able to put it into background
		 #   and not STOP itself; there's no good use for the
		 #   controls for streaming audio anyway, right?
		]);
sub mplayer; *mplayer= \&mms;
sub aacplus; *aacplus= \&mplayer;

*mp3=
  (($opt_ao or $opt_mplayer) ? \&mplayer :
   &$mkplayer (["mpg123",
		"-b", "1024",
		# ^ audio buffer size, not network buffering. Maybe
		#   doesn't make 'sense'/work well for OSS4.
		($opt_mono ? "-m" : ()),
	       ]));

*ogg=
  (($opt_ao or $opt_mplayer) ? \&mplayer :
   &$mkplayer (["ogg123",
		"-b","180",#
		"-p","90",
		"--audio-buffer","1000",#
		# ^ well shouldn't it be 10 times larger than the
		#   input...
		"-q",
		# ^ avoid using much CPU for screen updating (in
		#   rlwrap/urxvt/Xorg)
	       ]));


# Wrap stationsfile with +{ }; and load it in a way that allows Trapl
# access to the context.
our $mapping= do {
    my $sub= eval qq[#line 1 "$stationsfile"\n sub{+{].do {
	open my $in, "<",$stationsfile;
	local $/;
	my $cnt= <$in>;
	close $in or die;
	$cnt
    }."
}}";
    die $@ if $@;
    # ^ that was the part for syntax errors.
    # now comes the part for runtime errors:
    &$sub()
};


sub Die {
    die bless [ join("", "$myname: ", @_, "\n") ], "Die"
}


# array of pairs -> hash containing only those pairs which appear once
# [ [ "a", 1 ], [ "a", 2 ], [ "b", 3 ] ] -> { "b" => 3 }
sub filter_singles ( $ ) {
    my ($lis)=@_;
    my $seen= {};
    my $out= {};
    for (@$lis) {
	my ($key,$val)=@$_;
	if ($$seen{$key}) {
	    delete $$out{$key}; # in case we had something
	} else {
	    $$seen{$key}=1;
	    $$out{$key}=$val;
	}
    }
    $out
}

eval {
    if ($opt_l or $opt_bitrate) {
	print map {
	    my ($do, $maybe_bitrate, $key, $url)= @{$$mapping{$_}};
	    my $br= $maybe_bitrate // "";
	    if ($opt_lb and ! defined $maybe_bitrate) {
		()
	    } else {
		(($opt_bitrate ? "$br\t" : "")
		 . $_
		 . ($opt_url ? "\t$url" : "")
		 . "\n")
	    }
	} sort keys %$mapping
    } elsif ($opt_l) {
	print map {
	    $opt_url ? "$_ $$mapping{$_}[0]\n" : "$_\n"
	} sort keys %$mapping
    } else {
	{
	    # first try to add the parts split on _, then split on
	    # number boundaries
	    local our $add_keys_singles= sub {
		local our $filtered= filter_singles \@_;
		for my $part (keys %$filtered) {
		    next if $$mapping{$part};
		    my $origkey= $$filtered{$part};
		    $$mapping{$part}=$$mapping{$origkey}
		}
	    };
	    &$add_keys_singles(map { my $key= $_;
				     map { [$_, $key] }
				       split /_/ }
			       keys %$mapping);
	    &$add_keys_singles(map { my $key= $_;
				     map { [$_, $key] }
				       /([a-z]+)/g }
			       keys %$mapping);
	    &$add_keys_singles(map { my $key= $_;
				     map { [$_, $key] }
				       /(\d+)/g }
			       keys %$mapping);
	}
	my $key= lc $rawkey;
	if (exists $$mapping{$key}) {
	    my ($do,$maybe_bitrate)= @{$$mapping{$key}};
	    &$do
	} else {
	    local our $trie= new Tree::Trie;
	    $trie->add_data ($_, $$mapping{$_}) for (keys %$mapping);

	    # filter on values, thus reverse key/value pairs
	    my $res= { $trie->lookup_data ($key) };
	    if (my @k= keys %$res) {
		my @v= map { $$res{$_} } @k;

		# check for ambiguities:
		my %seen;
		my @vuniq;
		for (@v) {
		    unless ($seen{$_}) {
			push @vuniq, $_;
			$seen{$_}=1
		    }
		}

		if (@vuniq == 1) {
		    my ($do,$maybe_bitrate)= @{$vuniq[0]};
		    &$do
		} else {
		    Die "station key '$key' resolves to multiple stations:\n".
		      join("",
			   sort
			   map {
			       my ($do, $maybe_bitrate, $key)= @$_;
			       "  $key\n"
			   } @vuniq);
		}
	    } else {
		Die "station key '$key' not found";
	    }
	}
    }
    1
} || do {
    my $e=$@;
    if (UNIVERSAL::isa($e, "Die")) {
	print STDERR $$e[0];
	exit 1;
    } else {
	die $e
    }
}

